import numpy as np

# wird in boegen_vorbereiten Ã¼bernommen
# --------------------------------------
# def minimum_edit_distance(s1, s2):
#     """ berechnet die Levenshteindistanz zwischen den beiden Strings s1 und s2 """
#     if len(s1) > len(s2):
#         s1, s2 = s2, s1
#     distanzen = range(len(s1) + 1)
#     for index2, char2 in enumerate(s2):
#         neue_distanzen = [index2+1]
#         for index1, char1 in enumerate(s1):
#             if char1 == char2:
#                 neue_distanzen.append(distanzen[index1])
#             else:
#                 neue_distanzen.append(1 + min((distanzen[index1],
#                                              distanzen[index1+1],
#                                              neue_distanzen[-1])))
#         distanzen = neue_distanzen
#     return distanzen[-1]

# def ist_schwarz(x):
#     """x ist gibt True zurÃ¼ck, wenn """
#     return x < 15

# def oberer_punkt(FB,a,b,border=0):
#     for j in range(int(border*b/100),b):
#         for i in range (3*a//8,5*a//8):
#             if ist_schwarz(FB[i,j]):
#                 return (i,j)

# def unterer_punkt(FB,a,b,border=0):
#     for j in range(b-1-int(border*b/100),0,-1):
#         for i in range (3*a//8,5*a//8):
#             if ist_schwarz(FB[i,j]):
#                 return (i,j)

# def linker_punkt(FB,a,b,border=0):
#     for i in range(int(border*a/100),a):
#         for j in range (3*b//8,5*b//8):
#             if ist_schwarz(FB[i,j]):
#                 return (i,j)

# def rechter_punkt(FB,a,b,border=0):
#     for i in range(a-1-int(border*a/100),0,-1):
#         for j in range (3*b//8,5*b//8):
#             if ist_schwarz(FB[i,j]):
#                 return (i,j)

                

# def shakeRight(FB,a,b,point):
#     stop = False
#     while(not stop and 0<=point[0]<a-1):
#         if   0<=point[1]<b and ist_schwarz(FB[point[0]+1,point[1]]):
#             point=(point[0]+1,point[1])
#         elif 0<=point[1]<b-1 and ist_schwarz(FB[point[0]+1,point[1]+1]):
#             point=(point[0]+1,point[1]+1)
#         elif 0<point[1]<b and ist_schwarz(FB[point[0]+1,point[1]-1]):
#             point=(point[0]+1,point[1]-1)
#         elif point[0]<a-2 and 0<=point[1]<b and ist_schwarz(FB[point[0]+2,point[1]]):
#             point=(point[0]+2,point[1])
#         elif point[0]<a-2 and 0<=point[1]<b-1 and ist_schwarz(FB[point[0]+2,point[1]+1]):
#             point=(point[0]+2,point[1]+1)
#         elif point[0]<a-2 and 0<point[1]<b and ist_schwarz(FB[point[0]+2,point[1]-1]):
#             point=(point[0]+2,point[1]-1)
#         else:
#             stop = True
#     return (point)

# def shakeLeft(FB,a,b,point):
#     stop = False
#     while(not stop and point[0]>0):
#         if   0<point[1]<b-1 and ist_schwarz(FB[point[0]-1,point[1]]):
#             point=(point[0]-1,point[1])
#         elif 0<point[1]<b-1 and ist_schwarz(FB[point[0]-1,point[1]+1]):
#             point=(point[0]-1,point[1]+1)
#         elif 0<point[1]<b-1 and ist_schwarz(FB[point[0]-1,point[1]-1]):
#             point=(point[0]-1,point[1]-1)
#         elif point[0]>1 and 0<point[1]<b-1 and ist_schwarz(FB[point[0]-2,point[1]]):
#             point=(point[0]-2,point[1])
#         elif point[0]>1 and 0<point[1]<b-1 and ist_schwarz(FB[point[0]-2,point[1]+1]):
#             point=(point[0]-2,point[1]+1)
#         elif point[0]>1 and 0<point[1]<b-1 and ist_schwarz(FB[point[0]-2,point[1]-1]):
#             point=(point[0]-2,point[1]-1)
#         else:
#             stop = True
#     return (point)

# def shakeDown(FB,a,b,point):
#     stop = False
#     while(not stop and point[1]<b-1):
#         if   0<point[0]<a-1 and ist_schwarz(FB[point[0],point[1]+1]):
#             point=(point[0],point[1]+1)
#         elif 0<point[0]<a-1 and ist_schwarz(FB[point[0]+1,point[1]+1]):
#             point=(point[0]+1,point[1]+1)
#         elif 0<point[0]<a-1 and ist_schwarz(FB[point[0]-1,point[1]+1]):
#             point=(point[0]-1,point[1]+1)
#         elif point[1]<b-2 and 0<point[0]<a-1 and ist_schwarz(FB[point[0],point[1]+2]):
#             point=(point[0],point[1]+2)
#         elif point[1]<b-2 and 0<point[0]<a-1 and ist_schwarz(FB[point[0]+1,point[1]+2]):
#             point=(point[0]+1,point[1]+2)
#         elif point[1]<b-2 and 0<point[0]<a-1 and ist_schwarz(FB[point[0]-1,point[1]+2]):
#             point=(point[0]-1,point[1]+2)
#         else:
#             stop = True
#     return (point)

# def shakeUp(FB,a,b,point):
#     stop = False
#     while(not stop and point[1]>0):
#         if   0<point[0]<a-1 and ist_schwarz(FB[point[0],point[1]-1]):
#             point=(point[0],point[1]-1)
#         elif 0<point[0]<a-1 and ist_schwarz(FB[point[0]+1,point[1]-1]):
#             point=(point[0]+1,point[1]-1)
#         elif 0<point[0]<a-1 and  ist_schwarz(FB[point[0]-1,point[1]-1]):
#             point=(point[0]-1,point[1]-1)
#         elif point[1]>1 and 0<point[0]<a-1 and ist_schwarz(FB[point[0],point[1]-2]):
#             point=(point[0],point[1]-2)
#         elif point[1]>1 and 0<point[0]<a-1 and ist_schwarz(FB[point[0]+1,point[1]-2]):
#             point=(point[0]+1,point[1]-2)
#         elif point[1]>1 and 0<point[0]<a-1 and  ist_schwarz(FB[point[0]-1,point[1]-2]):
#             point=(point[0]-1,point[1]-2)
#         else:
#             stop = True
#     return (point)


# def isRed(x):
#     return x[0]>240 and x[1]<15 and x[2] < 15

# def isRGBBlack(x):
#     return x[0]<15 and x[1]<15 and x[2]<15

# def findRedTop(FB,a,b):
#     for j in range(0,b):
#         for i in range (3*a//8,5*a//8):
#             if isRed(FB[i,j]):
#                 return (i,j)

# def findRedBottom(FB,a,b):
#     for j in range(b-1,0,-1):
#         for i in range (3*a//8,5*a//8):
#             if isRed(FB[i,j]):
#                 return (i,j)

# def findRedLeft(FB,a,b):
#     for i in range(0,a):
#         for j in range (3*b//8,5*b//8):
#             if isRed(FB[i,j]):
#                 return (i,j)

# def findRedRight(FB,a,b):
#     for i in range(a-1,0,-1):
#         for j in range (3*b//8,5*b//8):
#             if isRed(FB[i,j]):
#                 return (i,j)

# def shakeRightRGB(FB,a,b,point):
#     stop = False
#     while(not stop and 0<=point[0]<a-1):
#         if 0<=point[1]<b and isRGBBlack(FB[point[0]+1,point[1]]):
#             point=(point[0]+1,point[1])
#         elif 0<=point[1]<b-1 and isRGBBlack(FB[point[0]+1,point[1]+1]):
#             point=(point[0]+1,point[1]+1)
#         elif 0<point[1]<b and isRGBBlack(FB[point[0]+1,point[1]-1]):
#             point=(point[0]+1,point[1]-1)
#         elif point[0]<a-2 and 0<=point[1]<b and isRGBBlack(FB[point[0]+2,point[1]]):
#             point=(point[0]+2,point[1])
#         elif point[0]<a-2 and 0<=point[1]<b-1 and isRGBBlack(FB[point[0]+2,point[1]+1]):
#             point=(point[0]+2,point[1]+1)
#         elif point[0]<a-2 and 0<point[1]<b and isRGBBlack(FB[point[0]+2,point[1]-1]):
#             point=(point[0]+2,point[1]-1)
#         else:
#             stop = True
#     return (point)

# def shakeLeftRGB(FB,a,b,point):
#     stop = False
#     while(not stop and point[0]>0):
#         if 0<point[1]<b-1 and isRGBBlack(FB[point[0]-1,point[1]]):
#             point=(point[0]-1,point[1])
#         elif 0<point[1]<b-1 and isRGBBlack(FB[point[0]-1,point[1]+1]):
#             point=(point[0]-1,point[1]+1)
#         elif 0<point[1]<b-1 and isRGBBlack(FB[point[0]-1,point[1]-1]):
#             point=(point[0]-1,point[1]-1)
#         elif point[0]>1 and 0<point[1]<b-1 and isRGBBlack(FB[point[0]-2,point[1]]):
#             point=(point[0]-2,point[1])
#         elif point[0]>1 and 0<point[1]<b-1 and isRGBBlack(FB[point[0]-2,point[1]+1]):
#             point=(point[0]-2,point[1]+1)
#         elif point[0]>1 and 0<point[1]<b-1 and isRGBBlack(FB[point[0]-2,point[1]-1]):
#             point=(point[0]-2,point[1]-1)
#         else:
#             stop = True
#     return (point)

# def shakeDownRGB(FB,a,b,point):
#     stop = False
#     while(not stop and point[1]<b-1):
#         if 0<point[0]<a-1 and isRGBBlack(FB[point[0],point[1]+1]):
#             point=(point[0],point[1]+1)
#         elif 0<point[0]<a-1 and isRGBBlack(FB[point[0]+1,point[1]+1]):
#             point=(point[0]+1,point[1]+1)
#         elif 0<point[0]<a-1 and isRGBBlack(FB[point[0]-1,point[1]+1]):
#             point=(point[0]-1,point[1]+1)
#         elif point[1]<b-2 and 0<point[0]<a-1 and isRGBBlack(FB[point[0],point[1]+2]):
#             point=(point[0],point[1]+2)
#         elif point[1]<b-2 and 0<point[0]<a-1 and isRGBBlack(FB[point[0]+1,point[1]+2]):
#             point=(point[0]+1,point[1]+2)
#         elif point[1]<b-2 and 0<point[0]<a-1 and isRGBBlack(FB[point[0]-1,point[1]+2]):
#             point=(point[0]-1,point[1]+2)
#         else:
#             stop = True
#     return (point)

# def shakeUpRGB(FB,a,b,point):
#     stop = False
#     while(not stop and point[1]>0):
#         if 0<point[0]<a-1 and isRGBBlack(FB[point[0],point[1]-1]):
#             point=(point[0],point[1]-1)
#         elif 0<point[0]<a-1 and isRGBBlack(FB[point[0]+1,point[1]-1]):
#             point=(point[0]+1,point[1]-1)
#         elif 0<point[0]<a-1 and  isRGBBlack(FB[point[0]-1,point[1]-1]):
#             point=(point[0]-1,point[1]-1)
#         elif point[1]>1 and 0<point[0]<a-1 and isRGBBlack(FB[point[0],point[1]-2]):
#             point=(point[0],point[1]-2)
#         elif point[1]>1 and 0<point[0]<a-1 and isRGBBlack(FB[point[0]+1,point[1]-2]):
#             point=(point[0]+1,point[1]-2)
#         elif point[1]>1 and 0<point[0]<a-1 and  isRGBBlack(FB[point[0]-1,point[1]-2]):
#             point=(point[0]-1,point[1]-2)
#         else:
#             stop = True
#     return (point)

# def searchBlack(FB,a,b,point,diam):
#     r=diam//2
#     for i in range(0,r+1):
#         for l in range(point[0]-i,point[0]+i):
#             if 0<=l<a and 0<=point[1]-i<b and ist_schwarz(FB[l,point[1]-i]):
#                 return (l,point[1]-i)
#             if 0<=l<a and 0<=point[1]+i<b and ist_schwarz(FB[l,point[1]+i]):
#                 return (l,point[1]+i)
#         for l in range(point[1]-i,point[1]+i):
#             if 0<=l<b and 0<=point[0]-i<a and ist_schwarz(FB[point[0]-i,l]):
#                 return (point[0]-i,l)
#             if 0<=l<b and 0<=point[0]+i<a and ist_schwarz(FB[point[0]+i,l]):
#                 return (point[0]+i,l)
#     return point

# def searchRGBBlack(FB,a,b,point,diam):
#     r=diam//2
#     for i in range(0,r+1):
#         for l in range(point[0]-i,point[0]+i):
#             if 0<=l<a and 0<=point[1]-i<b and isRGBBlack(FB[l,point[1]-i]):
#                 return (l,point[1]-i)
#             if 0<=l<a and 0<=point[1]+i<b and isRGBBlack(FB[l,point[1]+i]):
#                 return (l,point[1]+i)
#         for l in range(point[1]-i,point[1]+i):
#             if 0<=l<b and 0<=point[0]-i<a and isRGBBlack(FB[point[0]-i,l]):
#                 return (point[0]-i,l)
#             if 0<=l<b and 0<=point[0]+i<a and isRGBBlack(FB[point[0]+i,l]):
#                 return (point[0]+i,l)
#     return point

def readItem(FB,rel,origin,width,height):
    e1 = np.array((1,0))
    e2 = np.array((0,1))
    pnt = origin+(width*rel[0],height*rel[1]) # mittelpunkt des kaestchens
    lo = (pnt-.8*height*e2-.6*width*e1).tolist()
    lo = (round(lo[0]),round(lo[1])) # koordinaten von kaestchen links oben
    ru = (pnt+.7*height*e2+.6*width*e1).tolist()
    ru = (round(ru[0]),round(ru[1])) # koordinaten von kaestchen rechts unten
    s = 0
    for i in range(lo[0],ru[0]):
        for j in range (lo[1],ru[1]):
            s += (FB[i,j])[0]+(FB[i,j])[1]+(FB[i,j])[2]
    return s/(ru[0]-lo[0])/(ru[1]-lo[1])/3 #durch 3, da 3 Farbkanaele

def paintItem(FB,rel,origin,width,height):
    e1 = np.array((1,0))
    e2 = np.array((0,1))
    pnt = origin+(width*rel[0],height*rel[1])
    lo = (pnt-.8*height*e2-.6*width*e1).tolist()
    lo = (round(lo[0]),round(lo[1]))
    ru = (pnt+.7*height*e2+.6*width*e1).tolist()
    ru = (round(ru[0]),round(ru[1]))
    for i in range(lo[0],ru[0]):
        for j in range (lo[1],ru[1]):
            FB[i,j]=(0,(FB[i,j])[1],255,255)


def item(FB,i,origin,width,height,alpha=0.99):
    if i==1:
        dic={   1 : (3.960561497334558,47.690550531070954),
                2 : (14.953431372549021,47.690550531070954),
                3 : (25.94630124776348,47.690550531070954),
                4 : (36.841020499080884,47.690550531070954),
                5 : (3.960561497334558,51.08180232481269),
                6 : (14.953431372549021,51.08180232481269),
                7 : (3.960561497334558,54.614356276773904),
                8 : (14.953431372549021,54.614356276773904),
                9 : (25.94630124776348,54.614356276773904),
                10 : (36.841020499080884,54.614356276773904),
                11 : (3.960561497334558,57.86430591229616),
                12 : (14.953431372549021,57.86430591229616),
                13 : (3.960561497334558,61.11425554825914),
                14 : (25.94630124776348,61.11425554825914),
                15 : (3.960561497334558,62.80988144513001),
                16 : (25.94630124776348,62.80988144513001)}

    if i==2:
        dic={   1 : (2.782754010692402,67.89675913574261),
                2 : (9.555147058823529,67.89675913574261),
                3 : (16.425690730851713,67.89675913574261),
                4 : (23.198083778952206,67.89675913574261),
                5 : (29.970476827205882,67.89675913574261),
                6 : (36.742869875306376,67.89675913574261),
                7 : (43.515262923406866,67.89675913574261)}
    
    if i==3:
        dic={   1 : (2.782754010692402,74.1140540907889),
                2 : (18.683155080208333,74.1140540907889),
                3 : (34.485405525735295,74.1140540907889),
                4 : (2.782754010692402,75.80967998765975),
                5 : (18.683155080208333,75.80967998765975),
                6 : (34.485405525735295,75.80967998765975)}

    if i==4:
        dic={   1 : (3.077205882352941,81.74437062714853),
                2 : (3.077205882352941,83.43999652401939),
                3 : (3.077205882352941,85.13562242089026),
                4 : (3.077205882352941,86.68994615954163),
                5 : (18.290552584681375,82.45088141736447),
                6 : (18.290552584681375,84.14650731423534),
                7 : (18.290552584681375,85.84213321110622),
                8 : (32.52239304810049,82.45088141736447),
                9 : (32.52239304810049,84.14650731423534),
                10 : (32.52239304810049,85.84213321110622)}
    
    if i==5:
        dic={   1 : (3.960561497334558,95.16807564389597),
                2 : (11.714460784313726,95.16807564389597),
                3 : (19.468360071292892,95.16807564389597),
                4 : (27.124108734405635,95.16807564389597),
                5 : (34.87800802144608,95.16807564389597),
                6 : (42.63190730851716,95.16807564389597),
                7 : (3.960561497334558,98.51693679021595),
                8 : (11.714460784313726,98.51693679021595),
                9 : (19.48799019607843,98.51693679021595),
                10 : (27.124108734405635,98.51693679021595),
                11 : (34.87800802144608,98.51693679021595),
                12 : (42.63190730851716,98.51693679021595)}
    
    if i==6:
        dic={   1 : (83.83553921568627,4.791215339620978),
                2 : (86.10281862745099,4.791215339620978),
                3 : (88.37009803921569,4.791215339620978),
                4 : (90.6373774509804,4.791215339620978),
                5 : (92.79669117647059,4.791215339620978),
                6 : (95.17193627450979,4.791215339620978),
                7 : (97.43921568627451,4.791215339620978)}

    if i==7:
        dic={   1 : (87.07450980392157,10.542213173248127),
                2 : (88.90992647058823,10.542213173248127),
                3 : (90.85330882352942,10.542213173248127),
                4 : (92.79669117647059,10.542213173248127),
                5 : (94.84803921568627,10.542213173248127),
                6 : (97.33125,10.542213173248127)}

    if i==8:
        dic={   1 : (87.07450980392157,12.251969285985014),
                2 : (88.90992647058823,12.251969285985014),
                3 : (90.85330882352942,12.251969285985014),
                4 : (92.79669117647059,12.251969285985014),
                5 : (94.84803921568627,12.251969285985014),
                6 : (97.33125,12.251969285985014)}

    if i==9:
        dic={   1 : (87.07450980392157,13.961725398677832),
                2 : (88.90992647058823,13.961725398677832),
                3 : (90.85330882352942,13.961725398677832),
                4 : (92.79669117647059,13.961725398677832),
                5 : (94.84803921568627,13.961725398677832),
                6 : (97.33125,13.961725398677832)}

    if i==10:
        dic={   1 : (87.07450980392157,15.516049137505506),
                2 : (88.90992647058823,15.516049137505506),
                3 : (90.85330882352942,15.516049137505506),
                4 : (92.79669117647059,15.516049137505506),
                5 : (94.84803921568627,15.516049137505506),
                6 : (97.33125,15.516049137505506)}

    if i==11:
        dic={   1 : (87.07450980392157,20.80074984949317),
                2 : (88.90992647058823,20.80074984949317),
                3 : (90.85330882352942,20.80074984949317),
                4 : (92.79669117647059,20.80074984949317),
                5 : (94.84803921568627,20.80074984949317),
                6 : (97.33125,20.80074984949317)}

    if i==12:
        dic={   1 : (87.07450980392157,22.51050596218598),
                2 : (88.90992647058823,22.51050596218598),
                3 : (90.85330882352942,22.51050596218598),
                4 : (92.79669117647059,22.51050596218598),
                5 : (94.84803921568627,22.51050596218598),
                6 : (97.33125,22.51050596218598)}

    if i==13:
        dic={   1 : (87.07450980392157,24),
                2 : (88.90992647058823,24),
                3 : (90.85330882352942,24),
                4 : (92.79669117647059,24),
                5 : (94.84803921568627,24),
                6 : (97.33125,24)}

    if i==14:
        dic={   1 : (87.07450980392157,29.50496278686646),
                2 : (88.90992647058823,29.50496278686646),
                3 : (90.85330882352942,29.50496278686646),
                4 : (92.79669117647059,29.50496278686646),
                5 : (94.84803921568627,29.50496278686646),
                6 : (97.33125,29.50496278686646)}

    if i==15:
        dic={   1 : (87.07450980392157,31.214718899559276),
                2 : (88.90992647058823,31.214718899559276),
                3 : (90.85330882352942,31.214718899559276),
                4 : (92.79669117647059,31.214718899559276),
                5 : (94.84803921568627,31.214718899559276),
                6 : (97.33125,31.214718899559276)}

    if i==16:
        dic={   1 : (87.07450980392157,33.0799073861613),
                2 : (88.90992647058823,33.0799073861613),
                3 : (90.85330882352942,33.0799073861613),
                4 : (92.79669117647059,33.0799073861613),
                5 : (94.84803921568627,33.0799073861613),
                6 : (97.33125,33.0799073861613)}

    if i==17:
        dic={   1 : (87.07450980392157,34.634231124944904),
                2 : (88.90992647058823,34.634231124944904),
                3 : (90.85330882352942,34.634231124944904),
                4 : (92.79669117647059,34.634231124944904),
                5 : (94.84803921568627,34.634231124944904),
                6 : (97.33125,34.634231124944904)}

    if i==18:
        dic={   1 : (87.07450980392157,36.18855486377258),
                2 : (88.90992647058823,36.18855486377258),
                3 : (90.85330882352942,36.18855486377258),
                4 : (92.79669117647059,36.18855486377258),
                5 : (94.84803921568627,36.18855486377258),
                6 : (97.33125,36.18855486377258)}

    if i==19:
        dic={   1 : (87.07450980392157,37.8983109764654),
                2 : (88.90992647058823,37.8983109764654),
                3 : (90.85330882352942,37.8983109764654),
                4 : (92.79669117647059,37.8983109764654),
                5 : (94.84803921568627,37.8983109764654),
                6 : (97.33125,37.8983109764654)}

    if i==20:
        dic={   1 : (87.07450980392157,39.608067089026),
                2 : (88.90992647058823,39.608067089026),
                3 : (90.85330882352942,39.608067089026),
                4 : (92.79669117647059,39.608067089026),
                5 : (94.84803921568627,39.608067089026),
                6 : (97.33125,39.608067089026)}

    if i==21:
        dic={   1 : (87.07450980392157,41.162390828118106),
                2 : (88.90992647058823,41.162390828118106),
                3 : (90.85330882352942,41.162390828118106),
                4 : (92.79669117647059,41.162390828118106),
                5 : (94.84803921568627,41.162390828118106),
                6 : (97.33125,41.162390828118106)}

    if i==22:
        dic={   1 : (87.07450980392157,43.027579314676075),
                2 : (88.90992647058823,43.027579314676075),
                3 : (90.85330882352942,43.027579314676075),
                4 : (92.79669117647059,43.027579314676075),
                5 : (94.84803921568627,43.027579314676075),
                6 : (97.33125,43.027579314676075)}

    if i==23:
        dic={   1 : (87.07450980392157,44.737335427501094),
                2 : (88.90992647058823,44.737335427501094),
                3 : (90.85330882352942,44.737335427501094),
                4 : (92.79669117647059,44.737335427501094),
                5 : (94.84803921568627,44.737335427501094),
                6 : (97.33125,44.737335427501094)}

    if i==24:
        dic={   1 : (87.07450980392157,46.29165916615249),
                2 : (88.90992647058823,46.29165916615249),
                3 : (90.85330882352942,46.29165916615249),
                4 : (92.79669117647059,46.29165916615249),
                5 : (94.84803921568627,46.29165916615249),
                6 : (97.33125,46.29165916615249)}

    if i==25:
        dic={   1 : (87.07450980392157,48.001415278977525),
                2 : (88.90992647058823,48.001415278977525),
                3 : (90.85330882352942,48.001415278977525),
                4 : (92.79669117647059,48.001415278977525),
                5 : (94.84803921568627,48.001415278977525),
                6 : (97.33125,48.001415278977525)}

    if i==26:
        dic={   1 : (87.07450980392157,49.55573900396651),
                2 : (88.90992647058823,49.55573900396651),
                3 : (90.85330882352942,49.55573900396651),
                4 : (92.79669117647059,49.55573900396651),
                5 : (94.84803921568627,49.55573900396651),
                6 : (97.33125,49.55573900396651)}

    if i==27:
        dic={   1 : (83.8355392157,56.3947415606),
                2 : (86.1028186275,56.3947415606),
                3 : (88.3700980392,56.3947415606),
                4 : (90.637377451,56.3947415606),
                5 : (92.9046568627,56.3947415606),
                6 : (95.0639705882,56.3947415606),
                7 : (97.33125,56.3947415606)}

    if i==28:
        dic={   1 : (51.5537990196,62.1457371601),
                2 : (57.9237745098,62.1457371601),
                3 : (72.7150735294,62.1457371601)}

    if i==29:
        dic={   1 : (87.07450980392157,69.451082874394),
                2 : (88.90992647058823,69.451082874394),
                3 : (90.85330882352942,69.451082874394),
                4 : (92.79669117647059,69.451082874394),
                5 : (94.84803921568627,69.451082874394),
                6 : (97.33125,69.451082874394)}

    if i==30:
        dic={   1 : (87.07450980392157,71.16083898721904),
                2 : (88.90992647058823,71.16083898721904),
                3 : (90.85330882352942,71.16083898721904),
                4 : (92.79669117647059,71.16083898721904),
                5 : (94.84803921568627,71.16083898721904),
                6 : (97.33125,71.16083898721904)}

    if i==31:
        dic={   1 : (87.07450980392157,72.8705667917),
                2 : (88.90992647058823,72.8705667917),
                3 : (90.85330882352942,72.8705667917),
                4 : (92.79669117647059,72.8705667917),
                5 : (94.84803921568627,72.8705667917),
                6 : (97.33125,72.8705667917)}

    if i==32:
        dic={   1 : (87.07450980392157,74.4248899267),
                2 : (88.90992647058823,74.4248899267),
                3 : (90.85330882352942,74.4248899267),
                4 : (92.79669117647059,74.4248899267),
                5 : (94.84803921568627,74.4248899267),
                6 : (97.33125,74.4248899267)}

    if i==33:
        dic={   1 : (51.5537990196,80.1758855262),
                2 : (57.9237745098,80.1758855262),
                3 : (72.7150735294,80.1758855262)}

    if i==34:
        dic={   1 : (87.07450980392157,87.6366365742),
                2 : (88.90992647058823,87.6366365742),
                3 : (90.85330882352942,87.6366365742),
                4 : (92.79669117647059,87.6366365742),
                5 : (94.84803921568627,87.6366365742),
                6 : (97.33125,87.6366365742)}

    if i==35:
        dic={   1 : (87.07450980392157,89.1909597092),
                2 : (88.90992647058823,89.1909597092),
                3 : (90.85330882352942,89.1909597092),
                4 : (92.79669117647059,89.1909597092),
                5 : (94.84803921568627,89.1909597092),
                6 : (97.33125,89.1909597092)}

    if i==36:
        dic={   1 : (87.07450980392157,90.9007151577),
                2 : (88.90992647058823,90.9007151577),
                3 : (90.85330882352942,90.9007151577),
                4 : (92.79669117647059,90.9007151577),
                5 : (94.84803921568627,90.9007151577),
                6 : (97.33125,90.9007151577)}

    if i==37:
        dic={   1 : (87.07450980392157,92.6104706062),
                2 : (88.90992647058823,92.6104706062),
                3 : (90.85330882352942,92.6104706062),
                4 : (92.79669117647059,92.6104706062),
                5 : (94.84803921568627,92.6104706062),
                6 : (97.33125,92.6104706062)}

    if i==38:
        dic={   1 : (87.07450980392157,94.3202260547),
                2 : (88.90992647058823,94.3202260547),
                3 : (90.85330882352942,94.3202260547),
                4 : (92.79669117647059,94.3202260547),
                5 : (94.84803921568627,94.3202260547),
                6 : (97.33125,94.3202260547)}

    if i==39:
        dic={   1 : (2.75233585222,3.96764999925),
                2 : (9.16395674024,3.96764999925),
                3 : (23.9432862448,3.96764999925)}

    if i==40:
        dic={   1 : (38.2879295875,11.3256089251),
                2 : (40.1353457756,11.3256089251),
                3 : (41.9827619636,11.3256089251),
                4 : (43.9388496922,11.3256089251),
                5 : (46.0036089612,11.3256089251),
                6 : (48.5030543921,11.3256089251)}

    if i==41:
        dic={   1 : (38.2879295875,13.0476844184),
                2 : (40.1353457756,13.0476844184),
                3 : (41.9827619636,13.0476844184),
                4 : (43.9388496922,13.0476844184),
                5 : (46.0036089612,13.0476844184),
                6 : (48.5030543921,13.0476844184)}

    if i==42:
        dic={   1 : (38.2879295875,14.7697599117),
                2 : (40.1353457756,14.7697599117),
                3 : (41.9827619636,14.7697599117),
                4 : (43.9388496922,14.7697599117),
                5 : (46.0036089612,14.7697599117),
                6 : (48.5030543921,14.7697599117)}

    if i==43:
        dic={   1 : (38.2879295875,16.4918354049),
                2 : (40.1353457756,16.4918354049),
                3 : (41.9827619636,16.4918354049),
                4 : (43.9388496922,16.4918354049),
                5 : (46.0036089612,16.4918354049),
                6 : (48.5030543921,16.4918354049)}

    if i==44:
        dic={   1 : (2.75233585222,21.6580618848),
                2 : (9.16395674024,21.6580618848),
                3 : (23.9432862448,21.6580618848)}

    if i==45:
        dic={   1 : (2.75233585222,28.2332592228),
                2 : (9.59864290214,28.2332592228),
                3 : (16.4449499521,28.2332592228),
                4 : (23.291257002,28.2332592228),
                5 : (30.0288925114,28.2332592228),
                6 : (36.7665280209,28.2332592228),
                7 : (43.6128350708,28.2332592228)}

    if i==46:
        dic={   1 : (3.07835047364,33.5560380202),
                2 : (3.07835047364,35.1215611959),
                3 : (3.07835047364,36.8436366892),
                4 : (19.8137677068,33.5560380202),
                5 : (19.8137677068,35.1215611959),
                6 : (19.8137677068,36.8436366892),
                7 : (34.1584110495,33.5560380202),
                8 : (34.1584110495,35.1215611959),
                9 : (34.1584110495,36.8436366892)}

    if i==47:
        dic={   1 : (38.2879295875,45.297461838),
                2 : (40.1353457756,45.297461838),
                3 : (41.9827619636,45.297461838),
                4 : (43.9388496922,45.297461838),
                5 : (46.0036089612,45.297461838),
                6 : (48.5030543921,45.297461838)}

    if i==48:
        dic={   1 : (38.2879295875,46.8629850138),
                2 : (40.1353457756,46.8629850138),
                3 : (41.9827619636,46.8629850138),
                4 : (43.9388496922,46.8629850138),
                5 : (46.0036089612,46.8629850138),
                6 : (48.5030543921,46.8629850138)}

    if i==49:
        dic={   1 : (38.2879295875,48.585060507),
                2 : (40.1353457756,48.585060507),
                3 : (41.9827619636,48.585060507),
                4 : (43.9388496922,48.585060507),
                5 : (46.0036089612,48.585060507),
                6 : (48.5030543921,48.585060507)}

    if i==50:
        dic={   1 : (38.2879295875,50.3071360003),
                2 : (40.1353457756,50.3071360003),
                3 : (41.9827619636,50.3071360003),
                4 : (43.9388496922,50.3071360003),
                5 : (46.0036089612,50.3071360003),
                6 : (48.5030543921,50.3071360003)}

    if i==51:
        dic={   1 : (38.2879295875,51.872659176),
                2 : (40.1353457756,51.872659176),
                3 : (41.9827619636,51.872659176),
                4 : (43.9388496922,51.872659176),
                5 : (46.0036089612,51.872659176),
                6 : (48.5030543921,51.872659176)}

    if i==52:
        dic={   1 : (38.2879295875,53.5947346693),
                2 : (40.1353457756,53.5947346693),
                3 : (41.9827619636,53.5947346693),
                4 : (43.9388496922,53.5947346693),
                5 : (46.0036089612,53.5947346693),
                6 : (48.5030543921,53.5947346693)}

    if i==53:
        dic={   1 : (38.2879295875,55.160257845),
                2 : (40.1353457756,55.160257845),
                3 : (41.9827619636,55.160257845),
                4 : (43.9388496922,55.160257845),
                5 : (46.0036089612,55.160257845),
                6 : (48.5030543921,55.160257845)}

    if i==54:
        dic={   1 : (35.5711410756,60.9526935952),
                2 : (37.8532434256,60.9526935952),
                3 : (40.1353457756,60.9526935952),
                4 : (42.3087765851,60.9526935952),
                5 : (44.590878935,60.9526935952),
                6 : (46.7643097445,60.9526935952),
                7 : (49.0464120945,60.9526935952)}

    if i==55:
        dic={   1 : (2.75233585222,66.118920075),
                2 : (9.16395674024,66.118920075),
                3 : (23.9432862448,66.118920075)}

    if i==56:
        dic={   1 : (3.07835047364,73.1637743657),
                2 : (3.07835047364,74.885849859),
                3 : (3.07835047364,76.6079253523),
                4 : (19.8137677068,73.1637743657),
                5 : (19.8137677068,74.885849859),
                6 : (19.8137677068,76.6079253523),
                7 : (34.049739509,73.1637743657),
                8 : (34.049739509,74.885849859),
                9 : (34.049739509,76.6079253523)}

    if i==57:
        dic={   1 : (38.2879295875,84.9051981835),
                2 : (40.1353457756,84.9051981835),
                3 : (41.9827619636,84.9051981835),
                4 : (43.9388496922,84.9051981835),
                5 : (46.0036089612,84.9051981835),
                6 : (48.5030543921,84.9051981835)}

    if i==58:
        dic={   1 : (38.2879295875,86.4707213593),
                2 : (40.1353457756,86.4707213593),
                3 : (41.9827619636,86.4707213593),
                4 : (43.9388496922,86.4707213593),
                5 : (46.0036089612,86.4707213593),
                6 : (48.5030543921,86.4707213593)}

    if i==59:
        dic={   1 : (38.2879295875,88.1927968525),
                2 : (40.1353457756,88.1927968525),
                3 : (41.9827619636,88.1927968525),
                4 : (43.9388496922,88.1927968525),
                5 : (46.0036089612,88.1927968525),
                6 : (48.5030543921,88.1927968525)}

    if i==60:
        dic={   1 : (38.2879295875,89.9148723458),
                2 : (40.1353457756,89.9148723458),
                3 : (41.9827619636,89.9148723458),
                4 : (43.9388496922,89.9148723458),
                5 : (46.0036089612,89.9148723458),
                6 : (48.5030543921,89.9148723458)}

    if i==61:
        dic={   1 : (38.2879295875,91.4803955215),
                2 : (40.1353457756,91.4803955215),
                3 : (41.9827619636,91.4803955215),
                4 : (43.9388496922,91.4803955215),
                5 : (46.0036089612,91.4803955215),
                6 : (48.5030543921,91.4803955215)}

    if i==62:
        dic={   1 : (35.5711410756,97.4293835892),
                2 : (37.8532434256,97.4293835892),
                3 : (40.1353457756,97.4293835892),
                4 : (42.3087765851,97.4293835892),
                5 : (44.590878935,97.4293835892),
                6 : (46.7643097445,97.4293835892),
                7 : (49.0464120945,97.4293835892)}

    if i==117:
        dic={   1 : (87.07450980392157,38.3983109764654),
                2 : (88.90992647058823,38.3983109764654),
                3 : (90.85330882352942,38.3983109764654),
                4 : (92.79669117647059,38.3983109764654),
                5 : (94.84803921568627,38.3983109764654),
                6 : (97.33125,38.3983109764654)}

    if i==118:
        dic={   1 : (87.07450980392157,40.108067089026),
                2 : (88.90992647058823,40.108067089026),
                3 : (90.85330882352942,40.108067089026),
                4 : (92.79669117647059,40.108067089026),
                5 : (94.84803921568627,40.108067089026),
                6 : (97.33125,40.108067089026)}

    if i==119:
        dic={   1 : (87.07450980392157,41.662390828118106),
                2 : (88.90992647058823,41.662390828118106),
                3 : (90.85330882352942,41.662390828118106),
                4 : (92.79669117647059,41.662390828118106),
                5 : (94.84803921568627,41.662390828118106),
                6 : (97.33125,41.662390828118106)}

    if i==120:
        dic={   1 : (87.07450980392157,43.527579314676075),
                2 : (88.90992647058823,43.527579314676075),
                3 : (90.85330882352942,43.527579314676075),
                4 : (92.79669117647059,43.527579314676075),
                5 : (94.84803921568627,43.527579314676075),
                6 : (97.33125,43.527579314676075)}

    # dic ist nun Dictionary mit Koordinaten der Kaestchenmittelpunkte

    itemsWithMulti = [1,3,4,5,46,56] 
    # items mit Multiple Choice
    itemsWithKA = list(range(7,27))+list(range(29,33))+list(range(34,39))+list(range(40,44))+list(range(47,54))+list(range(57,62))+list(range(117,121))
    # item mit "keine Angabe"-Feld


    threshold=0
    for key in dic:
        if i in itemsWithKA: # Falls es ein KA-Kaestchen gibt
            if (key!=6):
                threshold += readItem(FB,dic[key],origin,width,height)
        else:
            threshold += readItem(FB,dic[key],origin,width,height)

    if i in itemsWithKA: # Falls es ein KA-Kaestchen gibt
        threshold = threshold/(len(dic)-1)
    else:
        threshold = threshold/len(dic)

    threshold  = alpha*threshold # angekreuzter Kreis muss mindestens (1-alpha)% dunkler sein, als nicht angekreuzter Kreis
    
    erg = {}
    noCross = False

    for key in list(dic):
        r = readItem(FB,dic[key],origin,width,height)
        if r<threshold: # falls Feld dunkel genug (angekreuzt-Kandidat)
            if not(i in itemsWithKA and key == 6):    # Feld nicht k.A. 
                erg.update({key : dic[key]})

    if (erg == {} and i in itemsWithKA):
        erg = {6:dic[6]}


    if not(i in itemsWithMulti): # falls keine Mehrfachauswahl, bestimme Minimum
        if erg!={}:
            minValKey = min(erg, key=erg.get)
            erg = {minValKey : erg[minValKey]}

    # Studienauswahl auf 2 beschrÃ¤nken - sonst setze Studium auf Sonstiges
    if i==1:
        if erg == {}:
            erg = {16 : dic[16]}
        if len(erg) > 2:
            minValKey = min(erg, key=erg.get)
            minVal = erg[minValKey]
            del erg[minValKey]
            minValKey2 = min(erg, key=erg.get)
            minVal2 = erg[minValKey2]
            erg={minValKey:minVal, minValKey2:minVal2}

    if i==2 and erg=={}:
        erg={4 : dic[4]}
        noCross=True

    if i==3 and erg=={}:
        erg={6 : dic[6]}
        noCross=True

    if i==4:
        part1 = {}
        if 1 in erg:
            part1.update({1 : erg[1]})
        if 2 in erg:
            part1.update({2 : erg[2]})
        if 3 in erg:
            part1.update({3 : erg[3]})
        if 4 in erg:
            part1.update({4 : erg[4]})
        if part1 == {}:
            part1 = {2 : dic[2]}
            noCross=True
        else:
            minValKey = min(part1, key=part1.get)
            minVal = part1[minValKey]
            part1 = {minValKey : minVal}

        part2 = {}
        if 5 in erg:
            part2.update({5 : erg[5]})
        if 6 in erg:
            part2.update({6 : erg[6]})
        if 7 in erg:
            part2.update({7 : erg[7]})
        if 8 in erg:
            part2.update({8 : erg[8]})
        if 9 in erg:
            part2.update({9 : erg[9]})
        if 10 in erg:
            part2.update({10 : erg[10]})
        if part2 == {}:
            part2 = {10 : dic[10]}
            noCross=True

        erg = part1
        erg.update(part2)



    if i==5:
        part1 = {}
        if 1 in erg:
            part1.update({1 : erg[1]})
        if 2 in erg:
            part1.update({2 : erg[2]})
        if 3 in erg:
            part1.update({3 : erg[3]})
        if 4 in erg:
            part1.update({4 : erg[4]})
        if 5 in erg:
            part1.update({5 : erg[5]})
        if 6 in erg:
            part1.update({6 : erg[6]})
        if part1 == {}:
            part1 = {2 : dic[2]}
            noCross=True
        else:
            minValKey = min(part1, key=part1.get)
            minVal = part1[minValKey]
            part1 = {minValKey : minVal}

        part2 = {}
        if 7 in erg:
            part2.update({7 : erg[7]})
        if 8 in erg:
            part2.update({8 : erg[8]})
        if 9 in erg:
            part2.update({9 : erg[9]})
        if 10 in erg:
            part2.update({10 : erg[10]})
        if 11 in erg:
            part2.update({11 : erg[11]})
        if 12 in erg:
            part2.update({12 : erg[12]})
        if part2 == {}:
            part2 = {8 : dic[8]}
            noCross=True
        else:
            minValKey = min(part2, key=part2.get)
            minVal = part2[minValKey]
            part2 = {minValKey : minVal}

        erg = part1
        erg.update(part2)

    if i in [6,27,54,62]:
        if erg=={}:
            erg={4 : dic[4]}
            noCross=True
        else:
            minValKey = min(erg, key=erg.get)
            minVal = erg[minValKey]
            erg = {minValKey : minVal}            

    if i in [28,33,39,44,55]:
        if erg=={}:
            erg={3 : dic[3]}
            noCross=True
        else:
            minValKey = min(erg, key=erg.get)
            minVal = erg[minValKey]
            erg = {minValKey : minVal}   

    if i == 45:
        if erg=={}:
            erg={1 : dic[1]}

    if i in [46,56]:
        part1 = {}
        if 1 in erg:
            part1.update({1 : erg[1]})
        if 2 in erg:
            part1.update({2 : erg[2]})
        if 3 in erg:
            part1.update({3 : erg[3]})
        if part1 == {}:
            part1 = {2 : dic[2]}
            noCross=True
        else:
            minValKey = min(part1, key=part1.get)
            minVal = part1[minValKey]
            part1 = {minValKey : minVal}

        part2 = {}
        if 4 in erg:
            part2.update({4 : erg[4]})
        if 5 in erg:
            part2.update({5 : erg[5]})
        if 6 in erg:
            part2.update({6 : erg[6]})
        if 7 in erg:
            part2.update({7 : erg[7]})
        if 8 in erg:
            part2.update({8 : erg[8]})
        if 9 in erg:
            part2.update({9 : erg[9]})
        if part2 == {}:
            part2 = {9 : dic[9]}
            noCross=True

        erg = part1
        erg.update(part2)
 


    # dic enthaelt nun nur noch die (nummerierten) Koordinaten von Item i, welche am staerksten angekreuzt sind (auÃer bei Multi Choice, dort alle angekreuzten) 

    return [erg,noCross]
